{"version":3,"file":"geo-viewport.umd.js","sources":["../lib/index.ts"],"sourcesContent":["import SphericalMercator from \"@mapbox/sphericalmercator\";\n\nfunction getAdjusted(base: number, ratios: Ratios, allowFloat: boolean) {\n  const adjusted = Math.min(\n    base - Math.log(ratios[0]) / Math.log(2),\n    base - Math.log(ratios[1]) / Math.log(2)\n  );\n\n  return allowFloat ? adjusted : Math.floor(adjusted);\n}\n\ntype Ratios = [number, number];\n\n/**\n * Viewport dimensions, in pixel units\n */\nexport type Dimensions = [number, number];\n\n/**\n * A center point, either as an object, or as an array.\n * The array must be in Longitude, Latitude order, as is the custom.\n */\nexport type LongitudeLatitude = Position | { lon: number; lat: number };\n\n/**\n * A Longitude, Latitude position, in that order.\n */\nexport type Position = [number, number];\n\n/**\n * A bounding rectangle, in WSEN order\n */\nexport type Bounds = [number, number, number, number];\n\nexport interface Viewport {\n  center: Position;\n  zoom: number;\n}\n\n/**\n * Given bounds in WSEN order and pixel dimensions,\n * figure out what center and zoom will produce a map\n * view with the same bounds and dimensions.\n */\nexport function viewport(\n  bounds: Bounds,\n  dimensions: Dimensions,\n  {\n    minzoom = 0,\n    maxzoom = 20,\n    tileSize = 256,\n    allowFloat = false,\n    allowAntiMeridian = false,\n  }: {\n    minzoom?: number;\n    maxzoom?: number;\n    tileSize?: number;\n    /**\n     * Allow floating-point zoom levels. By default,\n     * only integer zoom levels are output.\n     */\n    allowFloat?: boolean;\n    allowAntiMeridian?: boolean;\n  } = {}\n): Viewport {\n  const merc = new SphericalMercator({\n    size: tileSize,\n    antimeridian: allowAntiMeridian,\n  });\n  const base = maxzoom;\n  const bl = merc.px([bounds[0], bounds[1]], base);\n  const tr = merc.px([bounds[2], bounds[3]], base);\n  const width = tr[0] - bl[0];\n  const height = bl[1] - tr[1];\n  const centerPixelX = bl[0] + width / 2;\n  const centerPixelY = tr[1] + height / 2;\n  const ratios: Ratios = [width / dimensions[0], height / dimensions[1]];\n  const adjusted = getAdjusted(base, ratios, allowFloat);\n\n  const center = merc.ll([centerPixelX, centerPixelY], base);\n  const zoom = Math.max(minzoom, Math.min(maxzoom, adjusted));\n\n  return { center, zoom };\n}\n\n/**\n * The inverse of viewport: given center, zoom,\n * dimensions, and tileSize, return the bounds that will be produced\n * when you configure a map with those parameters.\n */\nexport function bounds(\n  center: LongitudeLatitude,\n  zoom: number,\n  dimensions: [number, number],\n  tileSize: number = 256\n): Bounds {\n  if (!Array.isArray(center)) {\n    center = [center.lon, center.lat];\n  }\n\n  const merc = new SphericalMercator({\n    size: tileSize,\n  });\n  const px = merc.px(center, zoom);\n  const tl = merc.ll(\n    [px[0] - dimensions[0] / 2, px[1] - dimensions[1] / 2],\n    zoom\n  );\n  const br = merc.ll(\n    [px[0] + dimensions[0] / 2, px[1] + dimensions[1] / 2],\n    zoom\n  );\n  return [tl[0], br[1], br[0], tl[1]];\n}\n"],"names":["sphericalmercator_1","__importDefault","require","exports","viewport","bounds","dimensions","minzoom","maxzoom","tileSize","allowFloat","allowAntiMeridian","merc","default","size","antimeridian","base","bl","px","tr","width","height","centerPixelX","centerPixelY","adjusted","ratios","Math","min","log","floor","getAdjusted","center","ll","zoom","max","Array","isArray","lon","lat","tl","br"],"mappings":"+LAA0DA,mBAAAC,gBAAAC,QAAA,8BA4C1DC,QAuCCC,SAvCD,SACEC,EACAC,GACAC,QACEA,EAAU,EAACC,QACXA,EAAU,GAAEC,SACZA,EAAW,IAAGC,WACdA,GAAa,EAAKC,kBAClBA,GAAoB,GAWlB,IAEJ,MAAMC,EAAO,IAAIZ,EAAAa,QAAkB,CACjCC,KAAML,EACNM,aAAcJ,IAEVK,EAAOR,EACPS,EAAKL,EAAKM,GAAG,CAACb,EAAO,GAAIA,EAAO,IAAKW,GACrCG,EAAKP,EAAKM,GAAG,CAACb,EAAO,GAAIA,EAAO,IAAKW,GACrCI,EAAQD,EAAG,GAAKF,EAAG,GACnBI,EAASJ,EAAG,GAAKE,EAAG,GACpBG,EAAeL,EAAG,GAAKG,EAAQ,EAC/BG,EAAeJ,EAAG,GAAKE,EAAS,EAEhCG,EA3ER,SAAqBR,EAAcS,EAAgBf,GACjD,MAAMc,EAAWE,KAAKC,IACpBX,EAAOU,KAAKE,IAAIH,EAAO,IAAMC,KAAKE,IAAI,GACtCZ,EAAOU,KAAKE,IAAIH,EAAO,IAAMC,KAAKE,IAAI,IAGxC,OAAOlB,EAAac,EAAWE,KAAKG,MAAML,EAC5C,CAoEmBM,CAAYd,EADN,CAACI,EAAQd,EAAW,GAAIe,EAASf,EAAW,IACxBI,GAK3C,MAAO,CAAEqB,OAHMnB,EAAKoB,GAAG,CAACV,EAAcC,GAAeP,GAGpCiB,KAFJP,KAAKQ,IAAI3B,EAASmB,KAAKC,IAAInB,EAASgB,IAGnD,EAOArB,QAuBCE,OAvBD,SACE0B,EACAE,EACA3B,EACAG,EAAmB,KAEd0B,MAAMC,QAAQL,KACjBA,EAAS,CAACA,EAAOM,IAAKN,EAAOO,MAG/B,MAAM1B,EAAO,IAAIZ,EAAAa,QAAkB,CACjCC,KAAML,IAEFS,EAAKN,EAAKM,GAAGa,EAAQE,GACrBM,EAAK3B,EAAKoB,GACd,CAACd,EAAG,GAAKZ,EAAW,GAAK,EAAGY,EAAG,GAAKZ,EAAW,GAAK,GACpD2B,GAEIO,EAAK5B,EAAKoB,GACd,CAACd,EAAG,GAAKZ,EAAW,GAAK,EAAGY,EAAG,GAAKZ,EAAW,GAAK,GACpD2B,GAEF,MAAO,CAACM,EAAG,GAAIC,EAAG,GAAIA,EAAG,GAAID,EAAG,GAClC"}